apiVersion: v1
kind: Namespace
metadata:
  name: postgres-payment-namespace
  labels:
    environment: production
    app: postgres
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-secret
  namespace: postgres-payment-namespace
  labels:
    app: postgres
data:
  POSTGRES_USER: ${PAYMENT_POSTGRES_USER}
  POSTGRES_PASSWORD: ${PAYMENT_POSTGRES_PASSWORD}
  POSTGRES_DB: ${PAYMENT_POSTGRES_DB}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: postgres-payment-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: role
                    operator: In
                    values:
                      - database-payment  # Nome do label do node
      containers:
        - name: postgres
          image: 'postgres:16'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-secret
          volumeMounts:
            - name: sql-files
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: sql-files
          configMap:
            name: database-sql
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: postgres-payment-namespace
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: database-sql
  namespace: postgres-payment-namespace
data:
  init-db1.sql: |
    do $$
    begin
        if not exists (
    select
        1
    from
        pg_namespace
    where
        nspname = 'fast_food') then
            create schema fast_food;
    end if;
    end
    $$;
    
    create type fast_food.payment_type_enum as enum (
      'DINHEIRO',
      'CARTAO_CREDITO',
      'CARTAO_DEBITO',
      'PIX',
      'VALE_REFEICAO'
    );
    
    create type fast_food.payment_status_enum as enum (
      'PENDENTE',
      'AUTORIZADO',
      'REJEITADO',
      'REEMBOLSADO'
    );
    
    create table if not exists fast_food.payment(
        id uuid,
        order_id numeric,
        effective_date timestamp default current_timestamp,
        type fast_food.payment_type_enum not null,
        status fast_food.payment_status_enum not null default 'PENDENTE',
        updated_at timestamp default current_timestamp,
        external_id varchar,
        constraint pk_payment primary key (id)
    );
