apiVersion: v1
kind: Namespace
metadata:
  name: postgres-order-namespace
  labels:
    environment: production
    app: postgres
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-secret
  namespace: postgres-order-namespace
  labels:
    app: postgres
data:
  POSTGRES_USER: tech_challenge
  POSTGRES_PASSWORD: tech_challenge_123
  POSTGRES_DB: techchallengedb
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: postgres-order-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: role
                    operator: In
                    values:
                      - database-order  # Nome do label do node
      containers:
        - name: postgres
          image: 'postgres:16'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-secret
          volumeMounts:
            - name: sql-files
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: sql-files
          configMap:
            name: database-sql
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: postgres-order-namespace
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: database-sql
  namespace: postgres-order-namespace
data:
  init-db1.sql: |
    do $$
    begin
        if not exists (
    select
    	1
    from
    	pg_namespace
    where
    	nspname = 'fast_food') then
            create schema fast_food;
    end if;
    end
    $$;

    create type fast_food.order_status_enum as enum (
      'PENDENTE',
      'RECEBIDO',
      'EM_PREPARO',
      'PRONTO',
      'FINALIZADO',
      'CANCELADO'
    );

    create table if not exists fast_food.order (
        id bigserial,
        customer_id uuid,
        total_amount numeric(10, 2) not null,
        status fast_food.order_status_enum not null default 'PENDENTE',
        payment jsonb,
        created_at timestamp default current_timestamp,
        updated_at timestamp default current_timestamp,
        constraint pk_order primary key (id)
    );

    create type fast_food.category_enum as enum (
      'LANCHE',
      'ACOMPANHAMENTO',
      'BEBIDA',
      'SOBREMESA'
    );

    create table if not exists fast_food.product (
        id bigserial,
        name varchar(255) not null,
        description text not null,
        price decimal(10, 2) not null,
        image_links text[],
        category fast_food.category_enum not null,
        created_at timestamp default current_timestamp,
        updated_at timestamp default current_timestamp,
        constraint pk_product primary key (id)
    );

    create table if not exists fast_food.product_order (
        id bigserial,
        order_id integer not null,
        product_id integer not null,
        quantity integer not null,
        unit_price decimal(10, 2) not null,
        observation text,
        created_at timestamp default current_timestamp,
        updated_at timestamp default current_timestamp,
        constraint pk_product_order primary key (id),
        constraint fk_product_order_product foreign key (product_id) references fast_food.product(id),
        constraint fk_product_order_order foreign key (order_id) references fast_food.order(id)
    );
    
    INSERT INTO fast_food.product (name, description, category, price, image_links)
    VALUES
    ('Refrigerante de Cola', 'Lata de refrigerante sabor cola', 'BEBIDA', 5.00, ARRAY['http://exemplo.com/bebida']),
    ('Refrigerante de Laranja', 'Lata de refrigerante sabor laranja', 'BEBIDA', 5.00, ARRAY['http://exemplo.com/bebida']),
    ('Refrigerante de Limão', 'Lata de refrigerante sabor limão', 'BEBIDA', 5.00, ARRAY['http://exemplo.com/bebida']),
    ('Suco de Laranja', 'Copão de suco natural de laranja', 'BEBIDA', 8.00, ARRAY['http://exemplo.com/bebida']),
    ('Água Mineral', 'Garrafa de água mineral sem gás 500ml', 'BEBIDA', 3.00, ARRAY['http://exemplo.com/bebida']),
    ('Café Expresso', 'Café expresso curto', 'BEBIDA', 4.00, ARRAY['http://exemplo.com/bebida']),
    ('Café com Leite', 'Café com leite', 'BEBIDA', 6.00, ARRAY['http://exemplo.com/bebida']),
    ('Chá de Camomila', 'Chá de camomila quente', 'BEBIDA', 5.00, ARRAY['http://exemplo.com/bebida']),
    ('Chá Verde Gelado', 'Chá verde gelado com limão', 'BEBIDA', 7.00, ARRAY['http://exemplo.com/bebida']),
    ('Milkshake de Chocolate', 'Milkshake cremoso de chocolate', 'BEBIDA', 10.00, ARRAY['http://exemplo.com/bebida']);
    
    INSERT INTO fast_food.product (name, description, category, price, image_links)
    VALUES
    ('Hambúrguer Clássico', 'Pão, hambúrguer de carne, queijo, alface, tomate e maionese', 'LANCHE', 15.00, ARRAY['http://exemplo.com/lanche']),
    ('Cheeseburger', 'Pão, hambúrguer de carne, queijo, alface, tomate e maionese', 'LANCHE', 17.00, ARRAY['http://exemplo.com/lanche']),
    ('Frango Grelhado no Pão', 'Pão, peito de frango grelhado, queijo, alface, tomate e maionese', 'LANCHE', 16.00, ARRAY['http://exemplo.com/lanche']),
    ('Sanduíche de Presunto e Queijo', 'Pão, presunto, queijo, alface, tomate e maionese', 'LANCHE', 12.00, ARRAY['http://exemplo.com/lanche']),
    ('Sanduíche Vegetariano', 'Pão, patty de vegetais, queijo, alface, tomate e maionese', 'LANCHE', 14.00, ARRAY['http://exemplo.com/lanche']);
    
    INSERT INTO fast_food.product (name, description, category, price, image_links)
    VALUES
    ('Pizza de Mussarela', 'Molho de tomate, queijo mussarela, azeitonas', 'LANCHE', 30.00, ARRAY['http://exemplo.com/lanche']),
    ('Pizza de Calabresa', 'Molho de tomate, queijo mussarela, calabresa fatiada, cebola', 'LANCHE', 35.00, ARRAY['http://exemplo.com/lanche']),
    ('Pizza Margherita', 'Molho de tomate, queijo mussarela, tomate e manjericão', 'LANCHE', 35.00, ARRAY['http://exemplo.com/lanche']),
    ('Pizza Quatro Queijos', 'Molho de tomate, queijos mussarela, gorgonzola, parmesão e provolone', 'LANCHE', 40.00, ARRAY['http://exemplo.com/lanche']),
    ('Pizza Vegetariana', 'Molho de tomate, queijo mussarela, pimentão, cebola, tomate e azeitonas', 'LANCHE', 35.00, ARRAY['http://exemplo.com/lanche']);
    
    INSERT INTO fast_food.product (name, description, category, price, image_links)
    VALUES
    ('Bruschetta de Tomate e Manjericão', 'Fatias de pão italiano tostadas com tomate, manjericão e azeite de oliva', 'ACOMPANHAMENTO', 12.00, ARRAY['http://exemplo.com/acomphamento']),
    ('Carpaccio', 'Finas fatias de carne bovina, servidas com molho de mostarda e alcaparras', 'ACOMPANHAMENTO', 18.00, ARRAY['http://exemplo.com/acomphamento']),
    ('Batata Frita com Molho Barbecue', 'Porção de batatas fritas crocantes servidas com molho barbecue', 'ACOMPANHAMENTO', 14.00, ARRAY['http://exemplo.com/acomphamento']),
    ('Coxinha de Frango', 'Porção de coxinhas de frango crocantes', 'ACOMPANHAMENTO', 10.00, ARRAY['http://exemplo.com/acomphamento']),
    ('Dadinhos de Tapioca', 'Dadinhos de tapioca crocantes servidos com geleia de pimenta', 'ACOMPANHAMENTO', 12.00, ARRAY['http://exemplo.com/acomphamento']);
    
    INSERT INTO fast_food.product (name, description, category, price, image_links)
    VALUES
    ('Sorvete de creme', 'Sorvete de creme servido com calda de chocolate', 'SOBREMESA', 12.00, ARRAY['http://exemplo.com/sobremesa']),
    ('Sorvete de chocolate', 'Sorvete de chocolate servido com calda quente', 'SOBREMESA', 18.00, ARRAY['http://exemplo.com/sobremesa']),
    ('Pudim', 'Pudim de leite com calda', 'SOBREMESA', 14.00, ARRAY['http://exemplo.com/sobremesa']);

