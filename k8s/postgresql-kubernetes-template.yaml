apiVersion: v1
kind: Namespace
metadata:
  name: postgres-namespace
  labels:
    environment: production
    app: postgres
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-secret
  namespace: postgres-namespace
  labels:
    app: postgres
data:
  POSTGRES_USER: tech_challenge
  POSTGRES_PASSWORD: tech_challenge_123
  POSTGRES_DB: techchallengedb
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: postgres-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: 'postgres:16'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-secret
          volumeMounts:
            - name: sql-files
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: sql-files
          configMap:
            name: database-sql
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: postgres-namespace
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: database-sql
  namespace: postgres-namespace
data:
  init-db1.sql: |
    do $$
    begin
        if not exists (
    select
    	1
    from
    	pg_namespace
    where
    	nspname = 'fast_food') then
            create schema fast_food;
    end if;
    end
    $$;

    create type fast_food.order_status_enum as enum (
      'PENDENTE',
      'RECEBIDO',
      'EM_PREPARO',
      'PRONTO',
      'FINALIZADO',
      'CANCELADO'
    );

    create table if not exists fast_food.order (
        id bigserial,
        customer_id uuid,
        total_amount numeric(10, 2) not null,
        status fast_food.order_status_enum not null default 'PENDENTE',
        payment jsonb,
        created_at timestamp default current_timestamp,
        updated_at timestamp default current_timestamp,
        constraint pk_order primary key (id)
    );

    create type fast_food.category_enum as enum (
      'LANCHE',
      'ACOMPANHAMENTO',
      'BEBIDA',
      'SOBREMESA'
    );

    create table if not exists fast_food.product (
        id bigserial,
        name varchar(255) not null,
        description text not null,
        price decimal(10, 2) not null,
        image_links text[],
        category fast_food.category_enum not null,
        created_at timestamp default current_timestamp,
        updated_at timestamp default current_timestamp,
        constraint pk_product primary key (id)
    );

    create table if not exists fast_food.product_order (
        id bigserial,
        order_id integer not null,
        product_id integer not null,
        quantity integer not null,
        unit_price decimal(10, 2) not null,
        observation text,
        created_at timestamp default current_timestamp,
        updated_at timestamp default current_timestamp,
        constraint pk_product_order primary key (id),
        constraint fk_product_order_product foreign key (product_id) references fast_food.product(id),
        constraint fk_product_order_order foreign key (order_id) references fast_food.order(id)
    );
